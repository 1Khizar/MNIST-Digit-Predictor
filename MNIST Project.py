# -*- coding: utf-8 -*-
"""Untitled50.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/179U1geN2Sge9B4rnrUSdgQQvlfQYUBt8
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

import tensorflow
from tensorflow import keras
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Flatten,Dense

(X_train, y_train), (X_test, y_test) = keras.datasets.mnist.load_data()

X_train.shape

X_test.shape

y_train.shape

X_train

X_train[0]

y_train[0]

plt.imshow(X_train[16])
y_train[16]

plt.imshow(X_test[16])
y_test[16]



"""# Normalization"""

X_train = X_train/255
X_test = X_test/255

X_train[0]

model = Sequential()

model.add(Flatten(input_shape=(28,28)))
model.add(Dense(128, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(10, activation='softmax'))

model.summary()

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

history = model.fit(X_train, y_train, batch_size=64, epochs=20, verbose=1, validation_split=0.2)



model.evaluate(X_test, y_test)



# model.predict_classes(X_test)
y_pred = model.predict(X_test)
y_pred_classes = np.argmax(y_pred, axis=1)
y_pred_classes

plt.imshow(X_test[0])

test_loss, test_acc = model.evaluate(X_test, y_test)
print("Test Accuracy:", test_acc)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(['Train', 'Validation'], loc='upper left')



